#ifndef BOOK_MANAGEMENT_GUARD__H 
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>

/*You can extend the structs (Book and BookArray) defined in this head file;
  However, you may not change the function prototypes. 
  You are also free to add additional head files and data structures as needed. 
*/

typedef struct _Book {
	    unsigned int id; //Book ID
		char *title; //book title
		char Title[100];
		char *authors; //comma separated list of authors
		char author[100];
		unsigned int year; // year of publication
		unsigned int copies; //number of copies the library has
		int in_copies; 
}Book;

typedef struct _BookArray {
	 Book* array; // pointer to array (or linked list) of struct Book.
	 Book data;
	 unsigned int length; // number of elements in the (Book*) array 
	 struct _BookArray *next;
}BookArray;

struct useraccount        //user
{
	int bookcount;
	char username[30];
	char userpassword[30];
	struct useraccount *next;
};

BookArray* cre_head();
BookArray* cre_node(Book data);
BookArray* bookList = NULL;
BookArray* user_Name = NULL;
char librarianname[10]="librarian";
char librarianpassword[10]="librarian";
//char librarianname[10]="1";
//char librarianpassword[10]="1";
char userName[100];//username.txt
char userName1[100];//username
int cop_ies[100]; 
struct useraccount *head = NULL, *end = NULL;

//char userName[100];//the current user name
//BookArray* cre_head();
//void displaythebook1(BookArray* nodehead)
void menu();
void cmd();
int registermenu();
int judge(char *name);
int loginmenu();
void userregister();
void userlogin();
void librarianview();
void displaythebook(BookArray* nodehead);
void searchbook();
BookArray* searchByName(BookArray* nodehead, char *bookName);//search the useraccount
void addByName(BookArray* nodehead, Book data);//on the useraccount
void userfunction(struct useraccount *pc);
void removeByName(BookArray* nodehead, char *bookName);//on the useraccount
void saveFile(const char* fileName,BookArray* nodehead);//on the useraccount
void readFile(const char* fileName, BookArray* nodehead);//on the useraccount
void readuserFile(const char* fileName);//on the useraccount
////char librarianname[10]="librarian";
////char librarianpassword[10]="librarian";
//
//
//
//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(FILE *file);

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
int load_books(FILE *file);

//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise
int add_book(Book book);

//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_book(Book book);

//finds books with a given title.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray* find_book_by_title (const char *title);

//finds books with the given authors.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray* find_book_by_author (const char *author);

//finds books published in the given year.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray* find_book_by_year (unsigned int year);


#endif
